n<-1000
means<-cumsum(rnorm(n))/(1:n)
plot(means)
means<- cumsum(sample(0:1, n, replace = T))/(1:n)
plot (means)   # observe how the expected value converges to the average of 0.5
negatives<-means<0
sum(negatives)
sum(means>0.5)
plot (means, ylim = c(0,1))   # observe how the expected value converges to the average of 0.5
means<- cumsum(sample(0:1, n, replace = T))/(1:n)
plot (means, ylim = c(0,1))   # observe how the expected value converges to the average of 0.5
means<- cumsum(sample(0:1, n, replace = T))/(1:n)
plot (means, ylim = c(0,1))   # observe how the expected value converges to the average of 0.5
dieroll <- sample(1:6, 10, replace=T)
mean(dieroll)
dieroll <- sample(1:6, 20, replace=T)
mean(dieroll)
dieroll <- sample(1:6, 100, replace=T)
mean(dieroll)
dieroll <- sample(1:6, 10, replace=T)
mean(dieroll)
dieroll <- sample(1:6, 20, replace=T)
mean(dieroll)
dieroll <- sample(1:6, 50, replace=T)
mean(dieroll)
dataroll <- matrix(c(10,20,100,10,20,50,3.6,3.6,3.26,3.3,3.3,3.46), nrow =6)
View(dataroll)
dataroll <- data.frame(dataroll)
names(dataroll)<-c("n", "avg")
View(dataroll)
dataroll$y<-(dataroll$avg-3.5)*sqrt(dataroll$n)/1.71
View(dataroll)
plot(dataroll$y)
View(dataroll)
0.56 + c(-1,1)*qnorm(0.975)*sqrt(0.56*0.44/100)
n <- 20
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats-qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul <- phats+qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll<p & ul>p)
})
phats <- rbinom(nosim, prob = p, size = n)+2/(n+4)
p<-0.1
phats <- rbinom(nosim, prob = p, size = n)+2/(n+4)
ll <- phats-qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul <- phats+qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll<p & ul>p)
n <- 20  # 20 isnt large enough to use a Wald confidence (aka this formula), function missbehaves, shows the interval fall below 90, even when we are targeting the 95% interval
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
p<-0.1
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats-qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul <- phats+qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll<p & ul>p)
q()
ppois(10, lambda=15)
round(pnorm(70, mean=80, sd=10))
round(pnorm(70, mean=80, sd=10)*100)
round(qnorm(0.95, mean=1100, sd=75)*100)
round(qnorm(0.95, mean=1100, sd=75))
round(qnorm(0.95, mean=1100, sd=7.5))
pbinom(3, n=5, prob=0.5)
pbinom(3, size=5, prob=0.5)
1-pbinom(3, size=5, prob=0.5)
q()
* Second element. Inserting equations: $\frac{1}{n} \sum_{i=1}^{n} x_{i}$
+ Second element. Inserting equations: $\frac{1}{n} \sum_{i=1}^{n} x_{i}$
-Second element. Inserting equations: $\frac{1}{n} \sum_{i=1}^{n} x_{i}$
- First element. Evaluating R expressions inline: 1+1 =`r 1+1`
- Second element. Inserting equations: $\frac{1}{n} \sum_{i=1}^{n} x_{i}$
-. Second element. Inserting equations: $\frac{1}{n} \sum_{i=1}^{n} x_{i}$
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
q()
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "class", "cluster", "KernSmooth", "manipulate", "nnet", "Rcpp", "rmarkdown", "rpart", "spatial"))
q()
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
knit2html("PA2_Weahter.Rmd")
knit2html("PA2_Weather.Rmd")
q()
source('~/Documents/DataSci/6. Statistical inference/Code_PA_StatInference.R')
var(samples$varinces)
stdev(samples$variances)
var(samples$variances)
source('~/Documents/DataSci/6. Statistical inference/Code_PA_StatInference.R')
var(samples$means)
source('~/Documents/DataSci/6. Statistical inference/Code_PA_StatInference.R')
h <- ggplot(samples, aes(x = variances)) + geom_histogram(aes(y=..density..),binwidth = 0.3, alpha = 0.3, colour = "black", fill = "purple") + stat_function(fun=dnorm, args=list(mean=25, sd=2.5),size =1) + theme(plot.title = element_text(size = 15, face ="bold", vjust = 2)) + ggtitle("Distribution of means") + xlim(15, 35)
source('~/Documents/DataSci/6. Statistical inference/Code_PA_StatInference.R')
q()
data(ToothGrowth)
data <- ToothGrowth
head(data)
data <- ToothGrowth
head(data)
View(data)
library(datasets)
data(ChickWeight)
head(ChickWeight)
library(reshape2)
toothData <- dcast(ToothGrowth, supp ~dose, value.var = "weight")
head(toothData)
doseData <- dcast(ToothGrowth, supp ~dose, value.var = "len")
head(toothData)
View(doseData)
toothdata <- ToothGrowth
head(toothdata)
library(reshape2)
doseData <- dcast(toothdata, supp ~dose, value.var = "len")
head(toothData)
library(datasets)
data(ChickWeight)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
View(wideCW)
View(toothdata)
View(doseData)
toothdata <- ToothGrowth
head(toothdata)
library(reshape2)
doseData <- dcast(toothdata, supp ~dose ~ len)
head(toothData)
dataq()
q()
data(ToothGrowth)
str(ToothGrowth)
library(dplyr)
ToothGrowth <- mutate(ToothGrowth, subject = c(1:60))
ojdata <- subset(ToothGrowth, supp == "OJ")
vcdata <- subset(ToothGrowth, supp == "VC")
View(ojdata)
library(tidyr)
doseData <- spread(data, dose, len)
doseData <- spread(ToothGrowth, dose, len)
View(doseData)
names(doseData) <- c("supp", "subject", "d1", "d2", "d3")
g <- ggplot(doseData, aes(x = dose, y = len, colour = dose, group = subject))
g <- g + geom_line() + facet_grid(. ~ dose) +
stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
View(doseData)
library(datasets)
data(ChickWeight)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW) [-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep ="")
View(ChickWeight)
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW) [-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep ="")
View(wideCW)
View(ojdata)
rm(doseData, ChickWeight, wideCW)
View(ToothGrowth)
doses <- unique(ToothGrowth$dose)
supp.tests <- data.frame(low.limit = numeric(), up.limit = numeric())
doses <- unique(ToothGrowth$dose)
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair)
}
print(supp.tests)
rm(supp.tests)
supp.tests <- data.frame(low.limit = numeric(), up.limit = numeric())
doses <- unique(ToothGrowth$dose)
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair)$conf
}
print(supp.tests)
rm(supp.doses)
rm(supp.tests)
supp.tests <- data.frame(low.limit = numeric(lenght(doses)), up.limit = numeric(length(doses)))
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair)$conf
}
dose1 <- subset(ToothGrowth, dose == 0.5)
t.test(len ~ supp, paired = FALSE, var.equal = T, data = dose1)$conf
a<-t.test(len ~ supp, paired = FALSE, var.equal = T, data = dose1)
doses <- unique(ToothGrowth$dose)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- unlist(t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair))$conf
}
doses <- unique(ToothGrowth$dose)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- rbind(t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair))$conf
}
print(supp.tests)
rm(supp.tests)
rm(pair)
doses <- unique(ToothGrowth$dose)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- rbind(t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair))$conf
}
print(supp.tests)
a[[4]]
rm(dose1, pair, supp.tests)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
test <- t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair)
supp.tests[i] <- test[[4]]
}
print(supp.tests)
b <- unlist (a)
b
str(b)
str(a)
a$conf
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
for (i in 1:length(doses)) {
pair <- subset(ToothGrowth, dose == doses[i])
supp.tests[i] <- (t.test(len ~ supp, paired = FALSE, var.equal = F, data = pair))$conf
}
print(supp.tests)
rm(pair, supp.tests)
doses <- unique(ToothGrowth$dose)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
pair <- subset(ToothGrowth, dose == 0.5)
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 1.0)
dose2 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 2.0)
dose3 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
supp.tests <- rbind(dose1$conf, dose2$conf, dose3$conf)
print(supp.tests)
View(supp.tests)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
names(supp.tests) <- c("Lower Limit", "Upper Limit")
row.names(supp.tests) <- c("d0.5", "d1.0", "d2.0")
pair <- subset(ToothGrowth, dose == 0.5)
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 1.0)
dose2 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 2.0)
dose3 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
supp.tests <- rbind(dose1$conf, dose2$conf, dose3$conf)
print(supp.tests)
rm (dose1, dose2, dose3, pair)
View(supp.tests)
rm(supp.tests)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
View(supp.tests)
row.names(supp.tests) <- c("d0.5", "d1.0", "d2.0")
View(supp.tests)
pair <- subset(ToothGrowth, dose == 0.5)
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 1.0)
dose2 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 2.0)
dose3 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
supp.tests <- rbind(dose1$conf, dose2$conf, dose3$conf)
View(supp.tests)
names(supp.tests) <- c("Lower.Limit", "Upper.Limit")
row.names(supp.tests) <- c("d0.5", "d1.0", "d2.0")
print(supp.tests)
View(supp.tests)
str(supp.tests)
rm (dose1, dose2, dose3, pair)
rm(supp.tests)
supp.tests <- data.frame(low.limit = numeric(length(doses)), up.limit = numeric(length(doses)))
pair <- subset(ToothGrowth, dose == 0.5)
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 1.0)
dose2 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
pair <- subset(ToothGrowth, dose == 2.0)
dose3 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
supp.tests <- rbind(dose1$conf, dose2$conf, dose3$conf)
row.names(supp.tests) <- c("d0.5", "d1.0", "d2.0")
print(supp.tests)
library(knitr)
kable(supp.tests, digits = 3)
View(supp.tests)
library(pander)
install.packages("pander")
library(pander)
panderOptions(digits = 3)
panderOptions("digits", 3)
pander(supp.tests)
names(supp.tests) <- c("Lower.Limit", "Upper.Limit")
pander(supp.tests)
library(knitr)
kable(supp.tests, digits=3)
library(xtable)
tabl <- xtable(supp.tests, digits =c(3,3))
print(tabl)
install.packages("xtable")
library(xtable)
tabl <- xtable(supp.tests, digits =c(3,3))
print(tabl)
detach("package:xtable", unload=TRUE)
q()
qt(o.975, 23)
qt(0.975, 23)
data(ToothGrowth)
library(dplyr)
ToothGrowth <- mutate(ToothGrowth, subject = c(1:60))
ojdata <- subset(ToothGrowth, supp == "OJ")
pair <- subset(ToothGrowth, dose == 0.5)
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, data = pair)
str(dose1)
dose1
dose1 <- t.test(len ~ supp, paired =F, var.equal = F, alternative = "greater", data = pair)
dose1
qt(0.95,14.969)
qt(0.975,14.969)
data(mtcars)
dat<-mtcars
str(mtcars)
avg<- mean(dat$mpg)
avg+c(-1,1)qt(0.975, 31)*stdev(dat$mpg)/sqrt(32)
avg+c(-1,1)*qt(0.975, 31)*stdev(dat$mpg)/sqrt(32)
avg+c(-1,1)*qt(0.975, 31)*sd(dat$mpg)/sqrt(32)
n<-9
stdev<-1
up <-0
avg<- round(up-stdev*qt(0.975,8)/sqrt(n)),2)
avg<- round(up-stdev*qt(0.975,8)/sqrt(n),2)
avg
ll <-0
round(ll+stdev*qt(0.975,8)/sqrt(n),2)
pbinom(3,size=4, prob=0.5, lower.tail.F)
pbinom(3,size=4, prob=0.5, lower.tail=F)
pbinom(4,size=4, prob=0.5, lower.tail=F)
pbinom(2,size=4, prob=0.5, lower.tail=F)
m0 <-1/100
m <-10/1787
ppois(m0, m, lower.tail=T)
lambda.test <- 10/1787*100
1-ppois(lambda.test,lambda.bench)
lambda.bench <- 1
lambda.test <- 10/1787*100
1-ppois(lambda.test,lambda.bench)
ppois(lambda.test,lambda.bench)
g <- ggplot(samples, aes(x = means)) + geom_histogram(aes(y=..density..), alpha = 0.3, colour = "black", fill = "lightgreen") + stat_function(fun=dnorm, args=list(mean=pop.mean, sd=sqrt(pop.variance)/n),size =1) + theme(plot.title = element_text(size = 12, face ="bold", vjust = 2)) + ggtitle("Distribution of Means")
g <- ggplot(samples, aes(x = means)) + geom_histogram(aes(y=..density..), alpha = 0.3, colour = "black", fill = "lightgreen") + stat_function(fun=dnorm, args=list(mean=pop.mean, sd=(sqrt(pop.variance)/n)),size =1) + theme(plot.title = element_text(size = 12, face ="bold", vjust = 2)) + ggtitle("Distribution of Means")
library (ggplot2)
library(grid)
g <- ggplot(samples, aes(x = means)) + geom_histogram(aes(y=..density..), alpha = 0.3, colour = "black", fill = "lightgreen") + stat_function(fun=dnorm, args=list(mean=pop.mean, sd=(sqrt(pop.variance)/draws)),size =1) + theme(plot.title = element_text(size = 12, face ="bold", vjust = 2)) + ggtitle("Distribution of Means")
g <- ggplot(samples, aes(x = means)) + geom_histogram(aes(y=..density..), alpha = 0.3, colour = "black", fill = "lightgreen") + stat_function(fun=dnorm, args=list(mean=pop.mean, sd=(sqrt(pop.variance)/n)),size =1) + theme(plot.title = element_text(size = 12, face ="bold", vjust = 2)) + ggtitle("Distribution of Means")
install.packages(c("foreign", "Hmisc", "lattice", "manipulate", "MASS", "nlme", "RMySQL", "survival"))
n <- 40
lambda <- 0.2
single.draw <- data.frame (draw = 1:n, value = rexp(n,lambda))
sd(single.draw$value)
sqrt(sd(single.draw$value))
sd(single.draw$value)/n
n <- 40
draws <- 1000
samples <- data.frame (size = rep(c(n)), means = numeric(draws), variances = numeric(draws))
for (i in 1:draws) {
samp <- rexp(n, lambda)
samples$means[i] <- mean(samp)
samples$variances[i] <- var(samp)
}
sd(samples$means)/n
sd(samples$means)/draws
0.2/40
library(swirl)
install_from-swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
q()
pwd
pwd()
library(swirl)
swirl()
choose(5,3)*0.8^3*0.2^2
choose(5,3)*0.8^3*.2^2+choose(5,4)0.8^4*0.2+choose(5,5)*0.8^5
choose(5,3)*0.8^3*.2^2+choose(5,4)*0.8^4*0.2+choose(5,5)*0.8^5
pbinom(2, 5, 0.8, lower.tail=F)
pbinom(2, size=5, prob=0.8, lower.tail=F)
pbinom(2, size=5, prob=0.8, lower.tail=FALSE)
qnorm(0.1)
0
qnorm(0.975, mean=3, sd=2)
3+2*1.96
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm((1200-1020)/50)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(0.75, mean=1020, sd=50, lower.tail=TRUE)
.53
ppois(3, 10, lower.tail=TRUE)
ppois(3, 2.5*4)
pbinom(5, size=1000, prob=0.01)
ppois(5, 1000*0.01)
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit <-lm(child~parent, data=galton)
sigma<-sum((fit$residuals)^2)/(n-2)
sigma<-sqrt(sum(fit$residuals^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-sum(deviance(fit)^2)
sRes <-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <-rep(1, nrow(galton))
lm(child~ones+parent -1, galton)
lm(child~parent, galton)
lm(child~1, galton)
head(trees)
fit <-lm(Volume~Girth +Height +Constant -1, trees)
trees2 <-eliminate("Girth", trees)
head(trees2)
fit2 <-lm(Volume ~ Height + Constant -1,trees2)
lapply(list(fit, fit2), coef)
exit
quit()
m <- matrix(rep(0,100), nrow=10)
diag(m) <- 1
m
n <- diag(10)
n
diag(m) <- 5
m
install.package("KernSmooth")
install?
install.packages("KernSmooth")
library(KernSmooth
)
setwd("~/Documents/DataSci/9_DataProds/MalariaDeathsApp/MalariaDeathsApp-git")
